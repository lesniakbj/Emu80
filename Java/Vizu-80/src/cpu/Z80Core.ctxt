#BlueJ class context
comment0.params=
comment0.target=Z80Core()
comment0.text=\r\n\ Empty\ Z80\ Constructor,\ does\ not\ specify\ System\ RAM\ nor\ System\ IO;\ TESTING\ ONLY\ -\ DO\ NOT\ USE\!\r\n\ \r\n\ @since\ 0.0.a\r\n\ @see\ IMemory\r\n\ @see\ IDevice\r\n\ @deprecated\r\n
comment1.params=ram\ device
comment1.target=Z80Core(IMemory,\ IDevice)
comment1.text=\r\n\ Constructor\ for\ the\ Z80\ Core,\ does\ not\ completely\ initialize\ all\ CPU\ Registers\ and\ Components.\r\n\ \r\n\ @param\ ram\r\n\ \ \ \ \ \ \ \ \ \ Specifies\ the\ System\ RAM\ Controller\ (and\ Bank)\ being\ used\ by\ the\ CPU\r\n\ @param\ device\r\n\ \ \ \ \ \ \ \ \ \ Specifies\ the\ System\ IO\ Controller\ used\ by\ the\ CPU\r\n\ \r\n\ @since\ 0.0.a\r\n\ @see\ src.cpu.IMemory\r\n\ @see\ src.cpu.IDevice\r\n
comment10.params=add
comment10.target=void\ setProgramCounter(int)
comment10.text=\r\n\ Public\ facing\ method\ to\ set\ the\ CPU\ Program\ Counter\ to\ an\ address\ in\ System\ Memory.\r\n\ \r\n\ @param\ add\ \r\n\ \ \ \ \ \ \ \ \ \ The\ Address\ that\ Program\ Counter\ is\ being\ set\ to\r\n\ \ \ \ \ \ \ \ \ \ \r\n\ @since\ 0.0.a\r\n
comment11.params=add
comment11.target=void\ setResetAddress(int)
comment11.text=\r\n\ Public\ facing\ method\ to\ set\ the\ CPU\ Reset\ Address\ to\ an\ address\ in\ System\ Memory.\r\n\ Used\ to\ resume\ a\ program\ when\ it\ has\ been\ halted.\r\n\ \r\n\ @param\ add\ \r\n\ \ \ \ \ \ \ \ \ \ The\ Address\ that\ Reset\ Address\ is\ being\ set\ to\r\n\ \ \ \ \ \ \ \ \ \ \r\n\ @since\ 0.0.a\ \ \ \ \ \ \ \ \r\n
comment12.params=reg
comment12.target=int\ getRegisterContents(FullRegisters)
comment12.text=\r\n\ Public\ facing\ method\ to\ retrieve\ the\ contents\ of\ any\ CPU\ Register\ pair.\ \r\n\ \r\n\ @param\ reg\r\n\ \ \ \ \ \ \ \ \ \ An\ Enumeration\ Constant\ specifying\ which\ register\ to\ retrieve\ the\ contents\ from\r\n\ @return\ \r\n\ \ \ \ \ \ \ \ \ \ The\ Content\ of\ the\ Register\ specified\ by\ reg\r\n\ \ \ \ \ \ \ \ \ \ \r\n\ @since\ 0.0.a\r\n\ @see\ src.cpu.FullRegisters\r\n
comment13.params=
comment13.target=int\ getStackPointer()
comment13.text=\r\n\ Public\ facing\ method\ that\ returns\ the\ location\ specified\ by\ the\ CPU\ Stack\ Pointer.\r\n\ \r\n\ @return\ The\ location\ the\ Stack\ Pointer\ is\ holding\r\n\ \r\n\ @since\ 0.0.a\r\n
comment14.params=
comment14.target=java.lang.String\ toString()
comment14.text=\r\n\ Public\ facing\ toString()\ method\r\n\ \r\n\ @return\r\n\ \ \ \ \ \ The\ name\ of\ the\ CPU,\ along\ with\ revision\ history\r\n\ \ \ \ \ \ \r\n\ @since\ 0.0.a\r\n
comment15.params=
comment15.target=void\ runResetProcess()
comment15.text=\r\n\ Runs\ the\ reset\ process\ of\ the\ CPU.\ First\ resets\ all\ of\ the\ Registers\ to\ their\ initial\ states,\ followed\r\n\ by\ the\ 2\ Index\ Registers\ and\ Stack\ Pointers.\ Resets\ the\ Interrupt\ and\ Refresh\ Registers,\ sets\ Interrupt\r\n\ 1\ and\ 2\ to\ their\ initial\ states,\ and\ stop\ masking\ all\ interrupts.\ Finally,\ set\ the\ Program\ Counter\ to\r\n\ the\ saved\ Reset\ Address,\ and\ set\ the\ initial\ CPU\ States.\r\n\ \r\n\ @since\ 0.0.a\r\n
comment16.params=opcode
comment16.target=void\ decodeOpcode(int)
comment16.text=\r\n\ Decode\ the\ current\ opcode\r\n\ \r\n\ @param\ opcode\r\n\ \ \ \ \ \ \ \ \ \ The\ Opcode\ that\ needs\ to\ be\ decoded\r\n\ \ \ \ \ \ \ \ \ \ \r\n\ @throws\ CPUException\r\n
comment2.params=
comment2.target=void\ executeInstruction()
comment2.text=\r\n\ Public\ Facing,\ executes\ one\ instruction\ during\ the\ cycle.\ First\ checks\ for\ Non-Maskable\ Interrupts,\ \r\n\ ones\ that\ force\ the\ CPU\ to\ fetch\ a\ new\ opcode.\ If\ there\ was\ one,\ check\ to\ see\ if\ there\ was\ just\ a\ \r\n\ Maskable\ Interrupt,\ [DOCUMENT].\ Fetch\ the\ opcode\ from\ System\ RAM\ at\ the\ location\ specified\ by\ \r\n\ the\ Program\ Counter,incrementing\ after.\ Finally,\ decode\ the\ opcode,\ and\ check\ to\ see\ \r\n\ if\ the\ CPU\ needs\ to\ be\ reset.\ If\ so,\ decrement\ the\ Program\ Counter,\ and\ run\ {@link\ \#resetCPU()}.\ \r\n\ \r\n\ @throws\ CPUException\r\n\ \r\n\ @since\ 0.0.a\r\n\ @see\ src.cpu.IMemory\r\n\ @see\ src.cpu.IDevice\r\n\ @see\ src.cpu.CPUException\r\n
comment3.params=
comment3.target=void\ resetCPU()
comment3.text=\r\n\ Public\ facing\ method\ to\ reset\ the\ CPU.\ Calls\ private\ method\ {@link\ runResetProcess()}\ to\ reset\ \r\n\ the\ CPU\ to\ its\ initial\ state.\ \r\n\ \r\n\ @since\ 0.0.a\r\n
comment4.params=
comment4.target=boolean\ isHalted()
comment4.text=\r\n\ Public\ facing\ method\ to\ find\ if\ the\ CPU\ has\ Halted.\ \r\n\ \r\n\ @return\ Whether\ the\ CPU\ has\ Halted\ or\ not\r\n\ \r\n\ @since\ 0.0.a\r\n
comment5.params=
comment5.target=boolean\ isCurrentlyBlocking()
comment5.text=\r\n\ Public\ facing\ method\ to\ find\ if\ the\ CPU\ is\ currently\ Blocked.\r\n\ \r\n\ @return\ Whether\ the\ CPU\ is\ currently\ Blocked\ or\ not\r\n\ \r\n\ @since\ 0.0.a\r\n
comment6.params=
comment6.target=long\ getStates()
comment6.text=\r\n\ Public\ facing\ method\ to\ find\ the\ current\ States\ of\ the\ CPU.\r\n\ \r\n\ @return\ [TO-DO]\:\ WTF\ IS\ THE\ STATES\ VARIABLE?\!\r\n\ \r\n\ @since\ 0.0.a\r\n
comment7.params=
comment7.target=void\ resetStates()
comment7.text=\r\n\ Public\ facing\ method\ to\ reset\ CPU\ States\ back\ to\ their\ initial\ state.\r\n\ \r\n\ @since\ 0.0.a\r\n
comment8.params=
comment8.target=void\ setInterrupt()
comment8.text=\r\n\ Public\ facing\ method\ to\ indicate\ that\ an\ external\ interrupt\ has\ occured.\r\n\ \r\n\ @since\ 0.0.a\r\n
comment9.params=
comment9.target=int\ getProgramCounter()
comment9.text=\r\n\ Public\ facing\ method\ to\ get\ the\ CPU\ Program\ Counter.\r\n\ \r\n\ @return\ Current\ location\ (in\ System\ RAM)\ of\ the\ Program,\ held\ by\ the\ Program\ Counter\r\n\ \r\n\ @since\ 0.0.a\r\n
numComments=17
